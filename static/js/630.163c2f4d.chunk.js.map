{"version":3,"file":"static/js/630.163c2f4d.chunk.js","mappings":"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","sources":["hooks/useHtttp.js","DAL/MarvelAPI/MarvelAPI.js","components/Common/HomePageBtn/HomePageBtn.js","components/Common/WikiButton/WikiButton.js","components/SearchingForm/SearchingForm.js","components/Characters/ViewCharacterItem/ViewCharacterItem.js","components/CharacterItem/CharacterItem.js","components/Characters/Characters.js","components/ErrorBoundary/ErrorBoundary .js","components/NotSelected/NotSelected.js","components/RandomChar/RandomChar.js","components/CharactersBlock/CharactersBlock.js","components/Common/Error/Error.js","utils/utils.js"],"sourcesContent":["import { useCallback, useState } from \"react\";\r\n\r\nconst useHtttp = () => {\r\n   \r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', headers = { 'Content-Type': 'application/json' }, body = null) => {\r\n        //setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, { method, headers, body });\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            return await response.json();\r\n        } catch (error) {\r\n            console.log(error.message)\r\n            throw error;\r\n        }\r\n\r\n    }, []);\r\n    const clearError = useCallback(() =>{\r\n        setProcess('error');\r\n    }, [])\r\n\r\n    return {  request, clearError, process, setProcess };\r\n\r\n}\r\n\r\n\r\nexport default useHtttp;","import useHtttp from \"../../hooks/useHtttp\";\r\n\r\n\r\nconst useMarvelAPI = () => {\r\n    let {  request, clearError, process, setProcess } = useHtttp();\r\n\r\n    const _baseURL = 'https://gateway.marvel.com:443/v1/public/characters';\r\n    const _apiKey = 'apikey=34f1a3219ea2ae0e4d07e8edc8e23bf5';\r\n\r\n    const getAllCharcters = async (offset = 500) => {\r\n        let res = await request(`${_baseURL}?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res;\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        let res = await request(`${_baseURL}/${id}?limit=9&offset=500&${_apiKey}`);\r\n        return _transformData(res);\r\n    }\r\n\r\n    const getAllComics = async (offset = 10000) => {\r\n        let res = await request(`https://gateway.marvel.com:443/v1/public/comics?orderBy=-issueNumber&limit=8&offset=${offset}&apikey=34f1a3219ea2ae0e4d07e8edc8e23bf5`);\r\n        return res;\r\n    }\r\n\r\n    const getComicsItem = async (id) => {\r\n        let res = await request(`https://gateway.marvel.com:443/v1/public/comics/${id}?apikey=34f1a3219ea2ae0e4d07e8edc8e23bf5`);\r\n        return _transformComicsItemObj(res);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        let res = await request(`https://gateway.marvel.com:443/v1/public/characters?name=${name}&apikey=34f1a3219ea2ae0e4d07e8edc8e23bf5`);\r\n        return res.data.results;/////////////\r\n    }\r\n\r\n    const _transformData = (response) => {\r\n        return {\r\n            id: response.data.results[0].id,\r\n            name: response.data.results[0].name,\r\n            description: response.data.results[0].description,\r\n            modified: response.data.results[0].modified,\r\n            thumbnail: response.data.results[0].thumbnail.path + '.' + response.data.results[0].thumbnail.extension,\r\n            wiki: response.data.results[0].urls[1].url,\r\n            comics: response.data.results[0].comics\r\n        }\r\n    }\r\n\r\n    const _transformComicsItemObj = (response) => {\r\n        return {\r\n            id: response.data.results[0].id,\r\n            title: response.data.results[0].title,\r\n            description: response.data.results[0].description,\r\n            price: response.data.results[0].prices[0].price,\r\n            pageCount: response.data.results[0].pageCount,\r\n            thumbnail: response.data.results[0].thumbnail.path + '.' + response.data.results[0].thumbnail.extension,\r\n            language: response.data.results[0].textObjects[0].language\r\n        }\r\n    }\r\n\r\n    return { getAllCharcters, getCharacter, getAllComics, getComicsItem, getCharacterByName,\r\n         clearError, process, setProcess };\r\n}\r\n\r\nexport default useMarvelAPI;","import './HomePageBtn.scss'\r\n\r\nconst HomePageBtn = () => {\r\n    return (\r\n        <>\r\n            <a className='homePage__btn' href='#' style={{\r\n                background: '#9F0013'\r\n            }}><span>HOMEPAGE</span></a>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default HomePageBtn;","import './WikiButton.scss'\r\n\r\nconst WikiButton = ({ wiki }) => {\r\n    return (\r\n        <>\r\n            <a className='wiki__btn' href={wiki} style={{\r\n                background: 'grey'\r\n            }}><span>WIKI</span></a>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WikiButton;","import { Field, Form, Formik } from \"formik\";\r\nimport { useState } from \"react\";\r\nimport * as Yup from \"yup\";\r\nimport useMarvelAPI from \"../../DAL/MarvelAPI/MarvelAPI\";\r\nimport \"./SearchingForm.scss\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst SearchingForm = () => {\r\n  const { getCharacterByName } = useMarvelAPI();\r\n  const [character, setCharacter] = useState(null);\r\n\r\n  return (\r\n    <Formik\r\n      validationSchema={Yup.object().shape({\r\n        name: Yup.string().required(\"This field is required\"),\r\n      })}\r\n      onSubmit={(values, { resetForm }) => {\r\n        setCharacter(null);\r\n        getCharacterByName(values.name).then((res) => {\r\n          setCharacter(res);\r\n        });\r\n        resetForm();\r\n      }}\r\n      initialValues={{\r\n        name: \"\",\r\n      }}\r\n    >\r\n      {({ errors, touched }) => (\r\n        <Form className=\"form\">\r\n          <h2>Or find a character by name:</h2>\r\n          <div className=\"formBlock\">\r\n            <Field name=\"name\" placeholder=\"Enter name\" />\r\n            <button type=\"submit\" className=\"form__btn\">\r\n              Submit\r\n            </button>\r\n          </div>\r\n\r\n          {errors.name && touched.name ? (\r\n            <div className=\"error\">{errors.name}</div>\r\n          ) : null}\r\n\r\n          {!character ? null : character.length > 0 ? (\r\n            <div className=\"form__result\">\r\n              <div className=\"found\">\r\n                There is! Visit {character[0].name} page?\r\n              </div>\r\n              <NavLink\r\n                to= \"/formCharacter\"\r\n                state={{charInfo: character}}\r\n                className=\"form__result_btn\"\r\n              >\r\n                TO PAGE\r\n              </NavLink>\r\n            </div>\r\n          ) : character.length === 0 ? (\r\n            <div className=\"error\">There's no such character</div>\r\n          ) : null}\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default SearchingForm;\r\n","import React from \"react\";\r\nimport HomePageBtn from \"../../Common/HomePageBtn/HomePageBtn\";\r\nimport WikiButton from \"../../Common/WikiButton/WikiButton\";\r\nimport SearchingForm from \"../../SearchingForm/SearchingForm\";\r\nimport '../ViewCharacterItem/ViewCharacterItem.scss';\r\n\r\nconst ViewCharacterItem = ({ character }) => {\r\n    const comics = character.comics.items;\r\n    const size = 10;\r\n    const limited = comics.slice(0, size);\r\n    const comicsItems = limited.map((item) => {\r\n        return <div key={character.comics.items.indexOf(item) + 1} className='character__comics-items__bar'> {item.name}</div>\r\n    })\r\n\r\n    return <div>\r\n        <div className='character'>\r\n            <div className='character__item'>\r\n                <div className='character__container'>\r\n                    <div className='character__shortInfo'>\r\n                        <div>\r\n                            <img src={character.thumbnail} alt={character.name} />\r\n                        </div>\r\n\r\n                        <div className='character__shortInfo__management'>\r\n                            <h2>{character.name}</h2>\r\n                            <div className='character__shortInfo__management__btns'>\r\n                                <HomePageBtn />\r\n                                <WikiButton wiki={character.wiki} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='character__restInfo'>\r\n                        <br></br>\r\n                        <div className='character__descr'>{character.description}</div>\r\n                        <br></br>\r\n                        <div className='character__comics'>Comics:</div>\r\n                        <div className='character__comics-items'>\r\n                            {comicsItems.length === 0 ? <div> No comics with this character </div> : comicsItems}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div style={{ marginTop: 50 }}>\r\n            <SearchingForm />\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ViewCharacterItem;","import React, { useEffect, useState } from \"react\";\r\nimport '../CharacterItem/CharacterItem.scss';\r\nimport ViewCharacterItem from \"../Characters/ViewCharacterItem/ViewCharacterItem\";\r\nimport Error from \"../Common/Error/Error\";\r\nimport Loading from \"../Common/Loading/Loading\";\r\nimport PropTypes from 'prop-types';\r\nimport useMarvelAPI from \"../../DAL/MarvelAPI/MarvelAPI\";\r\n\r\nconst CharacterItem = ({ selectedId }) => {\r\n\r\n    let [character, setCharacter] = useState(null);\r\n    let { getCharacter, error, loading } = useMarvelAPI();\r\n\r\n    useEffect(() => {\r\n        if (selectedId) {\r\n            getCharacter(selectedId)\r\n                .then(character => {\r\n                    setCharacter(character);\r\n                })\r\n        }\r\n    }, [selectedId]);\r\n\r\n    return (<>\r\n        {loading ? <Loading /> : null}\r\n        {error ? <Error /> : null}\r\n        {!loading && !error && character ? <ViewCharacterItem character={character} /> : null}\r\n    </>\r\n    )\r\n}\r\n\r\n\r\nCharacterItem.propTypes = {\r\n    selectedId: PropTypes.number\r\n};\r\n\r\nexport default CharacterItem;","import React, { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport \"../Characters/Characters.scss\";\r\nimport useMarvelAPI from \"../../DAL/MarvelAPI/MarvelAPI\";\r\nimport componentContent from \"../../utils/utils\";\r\n\r\nconst Characters = (props) => {\r\n  let [characters, setCharacters] = useState([]);\r\n  let [offset, setOffset] = useState(509);\r\n  let [newCharsPortion, setNewCharsPortion] = useState(false);\r\n  let { getAllCharcters, process, setProcess } = useMarvelAPI();\r\n\r\n  useEffect(() => {\r\n    getCharacters();\r\n  }, []);\r\n\r\n  const getCharacters = useCallback(() => {\r\n    setProcess(\"waiting\");\r\n    setNewCharsPortion(false);\r\n\r\n    getAllCharcters()\r\n      .then((res) => {\r\n        setCharacters((characters) => [...characters, ...res.data.results]);\r\n      })\r\n      .then(() => setProcess(\"loaded\"));\r\n  }, []);\r\n\r\n  const onLoadMoreBtn = () => {\r\n    setNewCharsPortion(true);\r\n    setOffset(offset + 9);\r\n\r\n    getAllCharcters(offset).then((res) => {\r\n      setCharacters((characters) => [...characters, ...res.data.results]);\r\n      setNewCharsPortion(false);\r\n    });\r\n  };\r\n\r\n  let refItems = useRef([]);\r\n\r\n  let onFocus = (id) => {\r\n    refItems.current.forEach((item) =>\r\n      item.classList.remove(\"characters__item__active\")\r\n    );\r\n    refItems.current.forEach((item) => item.classList.add(\"characters__item\"));\r\n    refItems.current[id].classList.add(\"characters__item__active\");\r\n    refItems.current[id].focus();\r\n  };\r\n\r\n  let handleKeyPress = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      onFocus(event.currentTarget.dataset.number);\r\n    }\r\n  };\r\n\r\n  const charactersArr = characters.map((item, i) => {\r\n    return (\r\n      <div\r\n        tabIndex={0}\r\n        data-number={i}\r\n        ref={(element) => (refItems.current[i] = element)}\r\n        onClick={() => {\r\n          props.getSelectedItem(item.id);\r\n          onFocus(i);\r\n        }}\r\n        onKeyPress={(e) => {\r\n          handleKeyPress(e);\r\n          props.getSelectedItem(item.id);\r\n        }}\r\n        className={`${\r\n          props.selectedId === item.id\r\n            ? \"characters__item__active\"\r\n            : \"characters__item\"\r\n        }`}\r\n        key={item.id}\r\n      >\r\n        <img\r\n          src={item.thumbnail.path + \".\" + item.thumbnail.extension}\r\n          alt={item.name}\r\n        />\r\n        <div className=\"characters__item__name\">{item.name}</div>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {componentContent(process, <ViewCharacters\r\n            characters={charactersArr}\r\n            newCharsPortion={newCharsPortion}\r\n            onLoadMoreBtn={onLoadMoreBtn}\r\n            offset={offset}\r\n          />)}\r\n    </>\r\n  );\r\n};\r\n\r\nconst ViewCharacters = ({\r\n  characters,\r\n  onLoadMoreBtn,\r\n  newCharsPortion,\r\n  offset,\r\n}) => {\r\n  return (\r\n    <div className=\"characters\">\r\n      <div className=\"characters__items\">{characters}</div>\r\n      <button\r\n        style={{ display: `${offset > 1553 ? \"none\" : \"block\"}` }}\r\n        disabled={newCharsPortion}\r\n        onClick={onLoadMoreBtn}\r\n      >\r\n        LOAD MORE\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Characters;\r\n","import React from \"react\";\r\nimport Error from \"../Common/Error/Error\";\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { error: null, errorInfo: null };\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({\r\n            error: error,\r\n            errorInfo: errorInfo\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.state.errorInfo) {\r\n            return (\r\n                <div>\r\n                    <h2>An Error Has Occured. Try again later</h2>\r\n                    <Error />\r\n                </div>\r\n            );\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import '../NotSelected/NotSelected.scss';\r\n\r\nconst NotSelected = () => {\r\n    return (\r\n        <div className='notSelected'>\r\n            <h2>Please select a character to see information</h2>\r\n            <div className='notSelected__figures'>\r\n                <div className='notSelected__figures__info'>\r\n                    <div className='notSelected__figures__info__circle'></div>\r\n                    <div className='notSelected__figures__info__block'></div>\r\n                </div>\r\n                <div className='notSelected__figures__block'></div>\r\n                <div className='notSelected__figures__block'></div>\r\n                <div className='notSelected__figures__block'></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotSelected","import React, { useState, useEffect } from 'react';\r\nimport tools from '../../resourses/img/tools.png';\r\nimport componentContent from '../../utils/utils';\r\nimport './RandomChar.scss';\r\nimport WikiButton from '../Common/WikiButton/WikiButton';\r\nimport HomePageBtn from '../Common/HomePageBtn/HomePageBtn';\r\nimport useMarvelAPI from '../../DAL/MarvelAPI/MarvelAPI';\r\n\r\nconst RandomCharacter = () => {\r\n    let [character, setCharacter] = useState({});\r\n    let { getCharacter, clearError, process, setProcess} = useMarvelAPI();\r\n\r\n    useEffect(() => {\r\n        getRandomChar();\r\n    }, []);\r\n\r\n    const getRandomChar = () => {\r\n        clearError();\r\n        setProcess('waiting');\r\n        const randomID = Math.floor(Math.random() * (1011400 - 1011000 + 1)) + 1011000;\r\n        getCharacter(randomID)\r\n            .then(character => {\r\n                setCharacter(character);\r\n            })\r\n            .then(() => setProcess('loaded'))\r\n    }\r\n\r\n    \r\n    return (\r\n        <div className='random__character'>\r\n            <div className='container'>\r\n                <div className='container__content'>\r\n                    <div className='random__character__content'>\r\n                        {componentContent(process, <View character={character} />)}\r\n                    </div>\r\n                    <div className='random__info'>\r\n                        <div className='random__info__content'>\r\n                            <p> Random character for today!\r\n                                <br></br>\r\n                                Do you want to get to know him better?</p>\r\n                            <p>Or choose another one</p>\r\n                            <button onClick={getRandomChar} disabled={process === 'waiting' ? true : false}>TRY IT</button>\r\n                            <img className='random__info__content__img' src={tools} alt='tool' />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({ character }) => {\r\n\r\n    let { name, description, thumbnail, wiki } = character;\r\n    try {\r\n        if (description.length > 200) {\r\n            let sliced = description.slice(0, 100) + '...';\r\n            description = sliced;\r\n        } else if (description === '') {\r\n            description = 'No information about this character. Please, click the \"WIKI\" button to get information';\r\n        }\r\n    } catch (e) { }\r\n\r\n    return <>\r\n        <div className='random__character__content__info'>\r\n            <img src={thumbnail} alt='Random Character' />\r\n        </div>\r\n        <div className='random__character__content__descr'>\r\n            <h2>{name}</h2>\r\n            <p>{description}</p>\r\n\r\n            <div className='random__character__content__descr__btns'>\r\n                <HomePageBtn />\r\n                <WikiButton wiki={wiki} />\r\n            </div>\r\n        </div>\r\n    </>\r\n}\r\n\r\nexport default RandomCharacter;","import CharacterItem from \"../CharacterItem/CharacterItem\";\r\nimport Characters from \"../Characters/Characters\";\r\nimport AnimatePage from \"../Common/AnimatePage/AnimatePage\";\r\nimport ErrorBoundary from \"../ErrorBoundary/ErrorBoundary \";\r\nimport NotSelected from \"../NotSelected/NotSelected\";\r\nimport RandomCharacter from \"../RandomChar/RandomChar\";\r\nimport SearchingForm from \"../SearchingForm/SearchingForm\";\r\n\r\nconst CharactersBlock = ({ getSelectedItem, selectedId }) => {\r\n    return <AnimatePage>\r\n        <RandomCharacter />\r\n        <div className='charactersBlock'>\r\n            <div className='container'>\r\n                <div className='charactersBlock__content'>\r\n                    <ErrorBoundary>\r\n                        <Characters getSelectedItem={getSelectedItem} selectedId={selectedId} />\r\n                    </ErrorBoundary>\r\n                    {!selectedId ? <NotSelected /> :\r\n                        <ErrorBoundary>\r\n                            <CharacterItem selectedId={selectedId} />\r\n                        </ErrorBoundary>}\r\n                    {/* <SearchingForm /> */}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </AnimatePage>\r\n\r\n}\r\n\r\nexport default CharactersBlock;","import error from '../Error/error.gif';\r\nimport '../Error/Error.scss';\r\n\r\nconst Error = () => {\r\n    return (\r\n        <>\r\n            <img className='error__img' src={error} alt='error' />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Error;","import Loading from \"../components/Common/Loading/Loading\"\r\nimport Error from \"../components/Common/Error/Error\";\r\n\r\nconst componentContent = (processName, component) => {\r\n  switch (processName) {\r\n    case \"waiting\":\r\n      return <Loading />;\r\n      break;\r\n    case \"loaded\":\r\n      return (\r\n        component\r\n      );\r\n      break;\r\n    case \"error\":\r\n      return <Error />;\r\n      break;\r\n    default:\r\n      return <Error />;\r\n  }\r\n};\r\n\r\nexport default componentContent;\r\n"],"names":["useState","process","setProcess","request","useCallback","url","method","headers","body","fetch","response","ok","Error","status","json","console","log","message","clearError","useHtttp","_baseURL","_apiKey","getAllCharcters","offset","res","getCharacter","id","_transformData","getAllComics","getComicsItem","_transformComicsItemObj","getCharacterByName","name","data","results","description","modified","thumbnail","path","extension","wiki","urls","comics","title","price","prices","pageCount","language","textObjects","className","href","style","background","useMarvelAPI","character","setCharacter","validationSchema","Yup","shape","required","onSubmit","values","resetForm","then","initialValues","errors","touched","placeholder","type","length","to","state","charInfo","comicsItems","items","slice","map","item","indexOf","src","alt","marginTop","selectedId","error","loading","useEffect","Loading","ViewCharacters","characters","onLoadMoreBtn","newCharsPortion","display","disabled","onClick","props","setCharacters","setOffset","setNewCharsPortion","getCharacters","refItems","useRef","onFocus","current","forEach","classList","remove","add","focus","charactersArr","i","tabIndex","ref","element","getSelectedItem","onKeyPress","e","event","key","currentTarget","dataset","number","componentContent","ErrorBoundary","errorInfo","this","setState","children","React","View","sliced","getRandomChar","randomID","Math","floor","random","tools","AnimatePage","processName","component"],"sourceRoot":""}